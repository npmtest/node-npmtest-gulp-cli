{"/home/travis/build/npmtest/node-npmtest-gulp-cli/test.js":"/* istanbul instrument in package npmtest_gulp_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/lib.npmtest_gulp_cli.js":"/* istanbul instrument in package npmtest_gulp_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_cli.__dirname + '/lib.npmtest_gulp_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/index.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('gulplog');\nvar chalk = require('chalk');\nvar yargs = require('yargs');\nvar Liftoff = require('liftoff');\nvar tildify = require('tildify');\nvar interpret = require('interpret');\nvar v8flags = require('v8flags');\nvar findRange = require('semver-greatest-satisfied-range');\nvar exit = require('./lib/shared/exit');\nvar cliOptions = require('./lib/shared/cliOptions');\nvar completion = require('./lib/shared/completion');\nvar verifyDeps = require('./lib/shared/verifyDependencies');\nvar cliVersion = require('./package.json').version;\nvar getBlacklist = require('./lib/shared/getBlacklist');\nvar toConsole = require('./lib/shared/log/toConsole');\n\n// Logging functions\nvar logVerify = require('./lib/shared/log/verify');\nvar logBlacklistError = require('./lib/shared/log/blacklistError');\n\n// Get supported ranges\nvar ranges = fs.readdirSync(__dirname + '/lib/versioned/');\n\n// Set env var for ORIGINAL cwd\n// before anything touches it\nprocess.env.INIT_CWD = process.cwd();\n\nvar cli = new Liftoff({\n  name: 'gulp',\n  completions: completion,\n  extensions: interpret.jsVariants,\n  v8flags: v8flags,\n});\n\nvar usage =\n  '\\n' + chalk.bold('Usage:') +\n  ' gulp ' + chalk.blue('[options]') + ' tasks';\n\nvar parser = yargs.usage(usage, cliOptions);\nvar opts = parser.argv;\n\n// This translates the --continue flag in gulp\n// To the settle env variable for undertaker\n// We use the process.env so the user's gulpfile\n// Can know about the flag\nif (opts.continue) {\n  process.env.UNDERTAKER_SETTLE = 'true';\n}\n\n// Set up event listeners for logging.\ntoConsole(log, opts);\n\ncli.on('require', function(name) {\n  log.info('Requiring external module', chalk.magenta(name));\n});\n\ncli.on('requireFail', function(name) {\n  log.error(chalk.red('Failed to load external module'), chalk.magenta(name));\n});\n\ncli.on('respawn', function(flags, child) {\n  var nodeFlags = chalk.magenta(flags.join(', '));\n  var pid = chalk.magenta(child.pid);\n  log.info('Node flags detected:', nodeFlags);\n  log.info('Respawned to PID:', pid);\n});\n\nfunction run() {\n  cli.launch({\n    cwd: opts.cwd,\n    configPath: opts.gulpfile,\n    require: opts.require,\n    completion: opts.completion,\n  }, handleArguments);\n}\n\nmodule.exports = run;\n\n// The actual logic\nfunction handleArguments(env) {\n  if (opts.help) {\n    console.log(parser.help());\n    exit(0);\n  }\n\n  if (opts.version) {\n    log.info('CLI version', cliVersion);\n    if (env.modulePackage && typeof env.modulePackage.version !== 'undefined') {\n      log.info('Local version', env.modulePackage.version);\n    }\n    exit(0);\n  }\n\n  if (opts.verify) {\n    var pkgPath = opts.verify !== true ? opts.verify : 'package.json';\n    if (path.resolve(pkgPath) !== path.normalize(pkgPath)) {\n      pkgPath = path.join(env.cwd, pkgPath);\n    }\n    log.info('Verifying plugins in ' + pkgPath);\n    return getBlacklist(function(err, blacklist) {\n      if (err) {\n        return logBlacklistError(err);\n      }\n\n      var blacklisted = verifyDeps(require(pkgPath), blacklist);\n\n      logVerify(blacklisted);\n    });\n  }\n\n  if (!env.modulePath) {\n    log.error(\n      chalk.red('Local gulp not found in'),\n      chalk.magenta(tildify(env.cwd))\n    );\n    log.error(chalk.red('Try running: npm install gulp'));\n    exit(1);\n  }\n\n  if (!env.configPath) {\n    log.error(chalk.red('No gulpfile found'));\n    exit(1);\n  }\n\n  // Chdir before requiring gulpfile to make sure\n  // we let them chdir as needed\n  if (process.cwd() !== env.cwd) {\n    process.chdir(env.cwd);\n    log.info(\n      'Working directory changed to',\n      chalk.magenta(tildify(env.cwd))\n    );\n  }\n\n  // Find the correct CLI version to run\n  var range = findRange(env.modulePackage.version, ranges);\n\n  if (!range) {\n    return log.error(\n      chalk.red('Unsupported gulp version', env.modulePackage.version)\n    );\n  }\n\n  // Load and execute the CLI version\n  require(path.join(__dirname, '/lib/versioned/', range, '/'))(opts, env);\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/exit.js":"'use strict';\n\n// Fix stdout truncation on windows\nfunction exit(code) {\n  if (process.platform === 'win32' && process.stdout.bufferSize) {\n    process.stdout.once('drain', function() {\n      process.exit(code);\n    });\n    return;\n  }\n  process.exit(code);\n}\n\nmodule.exports = exit;\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/cliOptions.js":"'use strict';\n\nvar chalk = require('chalk');\n\nmodule.exports = {\n  help: {\n    alias: 'h',\n    type: 'boolean',\n    desc: chalk.gray(\n      'Show this help.'),\n  },\n  version: {\n    alias: 'v',\n    type: 'boolean',\n    desc: chalk.gray(\n      'Print the global and local gulp versions.'),\n  },\n  require: {\n    type: 'string',\n    requiresArg: true,\n    desc: chalk.gray(\n      'Will require a module before running the gulpfile. ' +\n      'This is useful for transpilers but also has other applications.'),\n  },\n  gulpfile: {\n    type: 'string',\n    requiresArg: true,\n    desc: chalk.gray(\n      'Manually set path of gulpfile. Useful if you have multiple gulpfiles. ' +\n      'This will set the CWD to the gulpfile directory as well.'),\n  },\n  cwd: {\n    type: 'string',\n    requiresArg: true,\n    desc: chalk.gray(\n      'Manually set the CWD. The search for the gulpfile, ' +\n      'as well as the relativity of all requires will be from here.'),\n  },\n  verify: {\n    desc: chalk.gray(\n      'Will verify plugins referenced in project\\'s package.json against ' +\n      'the plugins blacklist.'),\n  },\n  tasks: {\n    alias: 'T',\n    type: 'boolean',\n    desc: chalk.gray(\n      'Print the task dependency tree for the loaded gulpfile.'),\n  },\n  depth: {\n    type: 'number',\n    requiresArg: true,\n    desc: chalk.gray(\n      'Specify the depth of the task dependency tree.'),\n  },\n  'tasks-simple': {\n    type: 'boolean',\n    desc: chalk.gray(\n      'Print a plaintext list of tasks for the loaded gulpfile.'),\n  },\n  'tasks-json': {\n    desc: chalk.gray(\n      'Print the task dependency tree, ' +\n      'in JSON format, for the loaded gulpfile.'),\n  },\n  color: {\n    type: 'boolean',\n    desc: chalk.gray(\n      'Will force gulp and gulp plugins to display colors, ' +\n      'even when no color support is detected.'),\n  },\n  'no-color': {\n    type: 'boolean',\n    desc: chalk.gray(\n      'Will force gulp and gulp plugins to not display colors, ' +\n      'even when color support is detected.'),\n  },\n  silent: {\n    alias: 'S',\n    type: 'boolean',\n    desc: chalk.gray(\n      'Suppress all gulp logging.'),\n  },\n  continue: {\n    type: 'boolean',\n    desc: chalk.gray(\n      'Continue execution of tasks upon failure.'),\n  },\n  'log-level': {\n    alias: 'L',\n    // Type isn't needed because count acts as a boolean\n    count: true,\n    // Can't use `default` because it seems to be off by one\n    desc: chalk.gray(\n      'Set the loglevel. -L for least verbose and -LLLL for most verbose. ' +\n      '-LLL is default.'),\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/completion.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function(name) {\n  if (typeof name !== 'string') {\n    throw new Error('Missing completion type');\n  }\n  var file = path.join(__dirname, '../../completion', name);\n  try {\n    console.log(fs.readFileSync(file, 'utf8'));\n    process.exit(0);\n  } catch (err) {\n    console.log(\n      'echo \"gulp autocompletion rules for',\n      '\\'' + name + '\\'',\n      'not found\"'\n    );\n    process.exit(5);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/verifyDependencies.js":"'use strict';\n\nvar matchdep = require('matchdep');\n\n/**\n * Given a collection of plugin names verifies this collection against\n * the blacklist. Returns an object with:\n * [plugin name]=>[blacklisting reason]\n * or an empty object if none of the dependencies to check are blacklisted.\n *\n * @param pkg - package.json contents\n * @param blacklist - contents of the blacklist in JSON format\n */\nfunction verifyDependencies(pkg, blacklist) {\n  var blacklisted = matchdep\n    .filterAll(Object.keys(blacklist), pkg)\n    .reduce(function(blacklisted, pluginName) {\n      blacklisted[pluginName] = blacklist[pluginName];\n      return blacklisted;\n    }, {});\n\n  return blacklisted;\n}\n\nmodule.exports = verifyDependencies;\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/getBlacklist.js":"'use strict';\n\nvar wreck = require('wreck');\n\nvar url = 'http://gulpjs.com/plugins/blackList.json';\n\nfunction getBlacklist(cb) {\n  wreck.get(url, { json: true }, function(err, res, blacklist) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, blacklist);\n  });\n}\n\nmodule.exports = getBlacklist;\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/log/toConsole.js":"'use strict';\n\nvar fancyLog = require('fancy-log');\n\nfunction noop() {}\n\n// The sorting of the levels is\n// significant.\nvar levels = [\n  'error', // -L: Logs error events.\n  'warn',  // -LL: Logs warn and error events.\n  'info',  // -LLL: Logs info, warn and error events.\n  'debug', // -LLLL: Logs all log levels.\n];\n\nfunction toConsole(log, opts) {\n  // Return immediately if logging is\n  // not desired.\n  if (opts.tasksSimple || opts.silent) {\n    // Keep from crashing process when silent.\n    log.on('error', noop);\n    return;\n  }\n\n  // Default loglevel to info level (3).\n  var loglevel = opts.logLevel || 3;\n\n  levels\n    .filter(function(item, i) {\n      return i < loglevel;\n    })\n    .forEach(function(level) {\n      if (level === 'error') {\n        log.on(level, fancyLog.error);\n      } else {\n        log.on(level, fancyLog);\n      }\n    });\n}\n\nmodule.exports = toConsole;\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/log/verify.js":"'use strict';\n\nvar chalk = require('chalk');\nvar log = require('gulplog');\n\nvar exit = require('../exit');\n\nfunction logVerify(blacklisted) {\n  var pluginNames = Object.keys(blacklisted);\n\n  if (!pluginNames.length) {\n    log.info(\n      chalk.green('There are no blacklisted plugins in this project')\n    );\n    exit(0);\n  }\n\n  log.warn(chalk.red('Blacklisted plugins found in this project:'));\n\n  pluginNames.map(function(pluginName) {\n    var reason = blacklisted[pluginName];\n    log.warn(chalk.bgRed(pluginName) + ': ' + reason);\n  });\n\n  exit(1);\n}\n\nmodule.exports = logVerify;\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/log/blacklistError.js":"'use strict';\n\nvar chalk = require('chalk');\nvar log = require('gulplog');\n\nvar exit = require('../exit');\n\nfunction logBlacklistError(err) {\n  log.error(chalk.red('Error: failed to retrieve plugins black-list'));\n  log.error(err.message); // Avoid duplicating for each version\n  exit(1);\n}\n\nmodule.exports = logBlacklistError;\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/bin/gulp.js":"#!/usr/bin/env node\n\n'use strict';\n\nrequire('../')();\n","/home/travis/build/npmtest/node-npmtest-gulp-cli/node_modules/gulp-cli/lib/shared/registerExports.js":"'use strict';\n\nfunction registerExports(gulpInst, tasks) {\n  var taskNames = Object.keys(tasks);\n\n  if (taskNames.length) {\n    taskNames.forEach(register);\n  }\n\n  function register(taskName) {\n    var task = tasks[taskName];\n\n    if (typeof task !== 'function') {\n      return;\n    }\n\n    gulpInst.task(taskName, task);\n  }\n}\n\nmodule.exports = registerExports;\n"}